#include <lcom/lcf.h>

#include <minix/syslib.h>
#include <minix/sysutil.h>
#include <stdint.h>

#include "8042.h"
#include "mouse.h"

int hook_id_mouse; //Global variable that will contain the value of hook_id used to subscribe and unsubscribe the interrupts

uint8_t mouseByte = 0; //Global variable that will contain a mouse byte

int mouse_subscribe_int(uint8_t *bit_no) {

  hook_id_mouse = (int) *bit_no;
  //Assigning the value of bit_no to the global variable hook_id
  //so that we can preserve bit_no when we call sys_irqsetpolicy

  if (sys_irqsetpolicy(MOUSE_IRQ, IRQ_REENABLE | IRQ_EXCLUSIVE, &hook_id_mouse) != OK) //Subscribing a notification on every interrupt in the input TIMER0_IRQ
    return 1;                                                                       //Value of hook_id will be used later in timer_unsubscribe_int()

  *bit_no = (uint8_t) BIT(*bit_no); //Returning the bit with number bit_no setting to 1

  return 0;
}

int mouse_unsubscribe_int() {

  if (sys_irqrmpolicy(&hook_id_mouse) != OK) //Unsubscribing the subscription of the interrupt notification associated with the specified hook_id
    return 1;

  return 0;
}

void (mouse_ih)() {
  
  uint32_t stat; //Status
  uint32_t data; //Variable that will contain a byte from the scancode

  while( 1 ) {

   sys_inb(KBC_CMD_REG, &stat); /*assuming it returns OK*/
   //KBC_CMD_REG = Status Register - 0x64
    /*loop while 8042 output buffer is empty*/
   if( stat & OBF ) {
      sys_inb(OUT_BUF, &data); /*assuming it returns OK*/
      if ( (stat & (PAR_ERR | TO_ERR)) != 0 ) //Verify if there is an error
        data = LARGEST_NUMBER;
      break;
    }
   tickdelay(micros_to_ticks(DELAY_US)); //In interrupts, this instruction won't be executed
  }

  if (data == LARGEST_NUMBER) //If data is -1, it has an error in the reading of the scancode, so code = 0
    mouseByte  = 0;
  else
    mouseByte = (uint8_t)data; //If there is no error, code will have the scancode
}

int enableStreamMode(){
  /* To be completed */
    printf("%s(%u): under construction\n", __func__);
    return 1;
}

